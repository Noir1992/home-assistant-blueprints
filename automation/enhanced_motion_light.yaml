blueprint:
  name: Enhanced motion light
  description: Enhanced motion light detection.
  domain: automation
  author: Noir1992
  source_url: https://github.com/Noir1992/home-assistant-blueprints/blob/main/automation/enhanced_motion_light.yaml
  input:
    motion_sensor:
      name: Motion sensor
      description: The motion sensor to trigger the automation.
      selector:
        entity:
          filter:
          - domain:
            - binary_sensor
            device_class:
            - motion
            - occupancy
          multiple: true
    target_light:
      name: Light
      description: The light to use for the automation.
      selector:
        target:
          entity:
          - domain:
            - light
    lumen_sensor:
      name: Lumen sensor
      description: The lumen sensor to use for the automation. (optional)
      default: {}
      selector:
        entity:
          filter:
          - domain:
            - sensor
          multiple: false
    lumen_threshold:
      name: Lumen threshold
      description: The light will only be turned on if the lumen value is smaller.
        (This only applies if a lumen sensor is specified)
      default: 8
      selector:
        number:
          min: 0.0
          max: 200.0
          step: 0.1
          unit_of_measurement: lx
          mode: box
    delay:
      name: Delay
      description: The delay before the light will get turned off after no motion
        is detected anymore.
      default: 0
      selector:
        number:
          min: 0.0
          max: 7200.0
          unit_of_measurement: seconds
          mode: box
          step: 1.0
    brightness:
      name: Brightness
      description: Brightness. (optional)
      default: 100.0
      selector:
        number:
          min: 1.0
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 1.0
    use_alternative_brightness:
      name: Use alternative brightness
      description: Boolean value to indicate if the alternative brightness should
        be used. (optional)
      default:
      selector:
        entity:
          filter:
          - domain:
            - input_boolean
            - binary_sensor
          multiple: false
    alternative_brightness_target_light:
      name: Alternative brightness Light
      description: The lights to use when alternative brightness is enabled. If none
        is selected, the lights form the "Light" field above will be used. (optional)
      default: {}
      selector:
        target:
          entity:
          - domain:
            - light
    alternative_brightness:
      name: Alternative brightness
      description: Alternative brightness. (optional)
      default: 1
      selector:
        number:
          min: 1.0
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 1.0
    disabled:
      name: Disabled
      description: Boolean input to disable the automation (eg. prevent automation
        if no one is home). (optional)
      default:
      selector:
        entity:
          multiple: false
trigger:
- platform: state
  entity_id: !input motion_sensor
  to: 'on'
  id: idMotionOn
- platform: state
  entity_id: !input motion_sensor
  to: 'off'
  id: idMotionOff
  for:
    seconds: !input delay
- platform: numeric_state
  entity_id: !input lumen_sensor
  below: !input lumen_threshold
  id: idLumen
variables:
  disabled: !input disabled
  motion_sensor: !input motion_sensor
  lumen_sensor: !input lumen_sensor
  lumen_threshold: !input lumen_threshold
  target_light: !input target_light
  alternative_brightness_target_light: !input alternative_brightness_target_light
  use_alternative_brightness: !input use_alternative_brightness
  alternative_brightness_enabled: '{{ use_alternative_brightness and states(use_alternative_brightness)
    == ''on'' }}'
  use_alternative_lights: '{{ alternative_brightness_enabled and alternative_brightness_target_light
    != {} }}'
  target_light_ids: '{{ target_light.entity_id is string | iif([target_light.entity_id],
    target_light.entity_id) }}'
  alternative_brightness_target_light_ids: '{{ alternative_brightness_target_light.entity_id
    is string | iif([alternative_brightness_target_light.entity_id], alternative_brightness_target_light.entity_id)
    }}'
  wait_for_state: '{{ trigger.id == ''idMotionOff'' | iif(''off'', ''on'') }}'
  light_ids: '{{ use_alternative_lights | iif(alternative_brightness_target_light_ids,
    target_light_ids) }}'
condition:
- condition: template
  value_template: '{{ not disabled or is_state(disabled, ''off'') }}'
- condition: or
  conditions:
  - condition: and
    conditions:
    - condition: trigger
      id: idMotionOff
    - condition: template
      value_template: '{{ expand(motion_sensor) | selectattr(''state'', ''eq'', ''on'')
        | list | count == 0 }}'
  - condition: and
    conditions:
    - condition: trigger
      id: idMotionOn
    - condition: template
      value_template: '{{ not lumen_sensor or states(lumen_sensor) | int <= lumen_threshold
        | int }}'
  - condition: and
    conditions:
    - condition: trigger
      id: idLumen
    - condition: state
      entity_id: !input motion_sensor
      state: 'on'
    - condition: template
      value_template: |-
        {% set temp_var_lights = expand(light_ids) %}
        {% set temp_var_matching_lights = temp_var_lights | selectattr('state', 'eq', 'off') | selectattr('last_changed', 'lt', now() - timedelta(seconds=5)) | list %}
        {{ (temp_var_lights | length) == (temp_var_matching_lights | length) }}
action:
- choose:
  - conditions:
    - condition: trigger
      id: idMotionOff
    sequence:
    - service: light.turn_off
      target:
        entity_id: '{{ target_light_ids + alternative_brightness_target_light_ids
          | unique | list }}'
  - conditions:
    - condition: trigger
      id:
      - idLumen
      - idMotionOn
    sequence:
    - variables:
        brightness: !input brightness
        alternative_brightness: !input alternative_brightness
    - service: light.turn_on
      target:
        entity_id: '{{ light_ids }}'
      data:
        brightness_pct: '{{ alternative_brightness_enabled | iif(alternative_brightness,
          brightness) }}'
- wait_template: '{{ (states.light | selectattr(''entity_id'', ''in'', light_ids)
    | rejectattr(''state'', ''eq'', wait_for_state) | list | count) == 0 }}'
  continue_on_timeout: true
  timeout: '5'
mode: queued
max_exceeded: silent
