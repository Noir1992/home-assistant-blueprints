blueprint:
  name: Enhanced thermostat Aqara E1
  description: Enhanced thermostat handling for Aqara E1 thermostats.
  domain: automation
  author: Noir1992
  source_url: https://github.com/Noir1992/home-assistant-blueprints/blob/main/automation/enhanced_thermostat_aqara_e1.yaml
  input:
    target_trvs:
      name: Thermostats
      description: The Aqara E1 thermostats.
      selector:
        entity:
          domain:
          - climate
          multiple: true
    external_temp_sensor:
      name: External temperature sensor
      description: The external temperature sensor.
      selector:
        entity:
          filter:
          - domain:
            - sensor
            device_class:
            - temperature
          multiple: false
    external_temp_update_interval:
      name: External temperature update interval
      description: The interval in which the external temperature will be updated
        at the thermostats.
      default: /5
      selector:
        text:
          multiple: false
          multiline: false
    target_temp:
      name: Target temperature
      description: The input to control the target temperature.
      selector:
        entity:
          filter:
          - domain:
            - input_number
          multiple: false
    eco_temp:
      name: ECO temperature
      description: The input to control the ECO temperature.
      selector:
        entity:
          filter:
          - domain:
            - input_number
          multiple: false
    eco_mode_activated:
      name: ECO activated
      description: Boolean value to indicate if the ECO mode is active.
      selector:
        entity:
          filter:
          - domain:
            - input_boolean
            - binary_sensor
          multiple: false
    window_sensors:
      name: Window sensors
      description: The window sensors.
      default: []
      selector:
        entity:
          domain:
          - binary_sensor
          - input_boolean
          multiple: true
    outdoor_temp_sensor:
      name: Outdoor temperature sensor
      description: The outdoor temperature sensor.
      selector:
        entity:
          filter:
          - domain:
            - sensor
            device_class:
            - temperature
          multiple: false
    outdoor_tempt_threshold:
      name: Outdoor temperature threshold
      description: The minimum threshold that has to be reached for the thermostats
        to turn on.
      default: 18
      selector:
        number:
          min: 0.0
          max: 25.0
          unit_of_measurement: Â°C
          step: 0.5
          mode: slider
    enable_delay:
      name: Enable delay
      description: Delay before thermostats will be turned on.
      default: 0
      selector:
        number:
          min: 0.0
          max: 60.0
          unit_of_measurement: seconds
          step: 1.0
          mode: slider
    disable_delay:
      name: Disable delay
      description: Delay before thermostats will be turned off.
      default: 0
      selector:
        number:
          min: 0.0
          max: 60.0
          unit_of_measurement: seconds
          step: 1.0
          mode: slider
variables:
  external_temp_sensor: !input external_temp_sensor
  external_temp_update_interval: !input external_temp_update_interval
  target_temp: !input target_temp
  eco_mode_activated: !input eco_mode_activated
  eco_temp: !input eco_temp
  window_sensors: !input window_sensors
  all_windows_closed: '{{ (window_sensors | select(''is_state'', ''on'') | list | count) == 0 }}'
  outdoor_temp_sensor: !input outdoor_temp_sensor
  outdoor_tempt_threshold: !input outdoor_tempt_threshold
  is_temp_outside_below: '{{ (states(outdoor_temp_sensor) | float) <= outdoor_tempt_threshold }}'
  are_thermostats_on: '{{ all_windows_closed and is_temp_outside_below }}'
trigger:
- platform: time_pattern
  minutes: !input external_temp_update_interval
  id: idExternalTempInterval
- platform: state
  entity_id: !input target_temp
  id: idTargetTempChange
- platform: state
  entity_id: !input eco_temp
  id: idEcoTempChange
- platform: state
  entity_id: !input eco_mode_activated
  id: idEcoModeChanged
- platform: state
  entity_id: !input window_sensors
  to: 'on'
  for:
    seconds: !input disable_delay
  id: idWindowOn
- platform: state
  entity_id: !input window_sensors
  to: 'off'
  for:
    seconds: !input enable_delay
  id: idWindowOff
- platform: numeric_state
  entity_id: !input outdoor_temp_sensor
  above: !input outdoor_tempt_threshold
  for:
    seconds: !input disable_delay
  id: idAboveOutdoorTempThreshold
- platform: numeric_state
  entity_id: !input outdoor_temp_sensor
  below: !input outdoor_tempt_threshold
  for:
    seconds: !input enable_delay
  id: idBelowOutdoorTempThreshold
condition:
- condition: or
  conditions:
  - alias: Update external temperatur if thermostat is on
    condition: trigger
    id: idExternalTempInterval
  - alias: Update target temperatur if thermostat is on, ECO mode is off and target
      temperatur changes
    condition: and
    conditions:
    - condition: trigger
      id: idTargetTempChange
    - condition: template
      value_template: '{{ are_thermostats_on }}'
    - condition: state
      entity_id: !input eco_mode_activated
      state: 'off'
  - alias: Update target temperatur if thermostat is on, ECO mode is on and ECO temperature
      changes
    condition: and
    conditions:
    - condition: trigger
      id: idEcoTempChange
    - condition: template
      value_template: '{{ are_thermostats_on }}'
    - condition: state
      entity_id: !input eco_mode_activated
      state: 'on'
  - alias: Update target temperatur if thermostat is on, and ECO mode changes
    condition: and
    conditions:
    - condition: trigger
      id: idEcoModeChanged
    - condition: template
      value_template: '{{ are_thermostats_on }}'
  - alias: Update thermostat state on window opening if the outside temperature is
      below threshold
    condition: and
    conditions:
    - condition: trigger
      id:
      - idWindowOn
    - condition: template
      value_template: '{{ is_temp_outside_below }}'
  - alias: Update thermostat state on window closing if the outside temperature is
      below threshold
    condition: and
    conditions:
    - condition: trigger
      id:
      - idWindowOff
    - condition: template
      value_template: '{{ all_windows_closed and is_temp_outside_below }}'
  - alias: Disable thermostat if outside temperature is above threshold and thermostat
      is on
    condition: and
    conditions:
    - condition: trigger
      id: idAboveOutdoorTempThreshold
    - condition: template
      value_template: '{{ all_windows_closed }}'
  - alias: Enable thermostat if outside temperature is below threshold and windows
      are closed
    condition: and
    conditions:
    - condition: trigger
      id: idBelowOutdoorTempThreshold
    - condition: template
      value_template: '{{ all_windows_closed }}'
action:
- if:
  - condition: or
    conditions:
    - condition: trigger
      id:
      - idExternalTempInterval
  then:
  - alias: Set thermostats to external if needed and update temperature
    repeat:
      for_each: !input target_trvs
      sequence:
      - variables:
          trv_temp_sensor_id: '{{ repeat.item | replace(''climate.'', ''select.'')
            + ''_sensor'' }}'
          trv_external_temp_id: '{{ repeat.item | replace(''climate.'', ''number.'')
            + ''_external_temperature_input'' }}'
      - if:
        - condition: template
          value_template: '{{ not is_state(trv_temp_sensor_id, ''external'') }}'
        then:
        - action: select.select_option
          target:
            entity_id: '{{ trv_temp_sensor_id }}'
          data:
            option: external
        - delay:
            seconds: 10
      - action: number.set_value
        data:
          value: '{{ states(external_temp_sensor) | float(0) | round(1) }}'
        target:
          entity_id: '{{ trv_external_temp_id }}'
  - delay:
      seconds: 10
- choose:
  - alias: Turn off thermostats if a window opened or the outside temperature is above the threshold
    conditions:
    - condition: trigger
      id:
      - idWindowOn
      - idAboveOutdoorTempThreshold
    sequence:
    - action: climate.set_hvac_mode
      target:
        entity_id: !input target_trvs
      data:
        hvac_mode: 'off'
  - alias: Turn on thermostats if all windows closed or the outside temperature falls below the threshold
    conditions:
    - condition: trigger
      id:
      - idWindowOff
      - idBelowOutdoorTempThreshold
    sequence:
    - action: climate.set_hvac_mode
      target:
        entity_id: !input target_trvs
      data:
        hvac_mode: heat
    - delay:
        seconds: 10
- alias: Set target temperature of thermostats
  if:
  - condition: trigger
    id:
    - idEcoModeChanged
    - idWindowOff
    - idEcoTempChange
    - idTargetTempChange
    - idBelowOutdoorTempThreshold
  then:
  - action: climate.set_temperature
    target:
      entity_id: !input target_trvs
    data:
      temperature: "{{ is_state(eco_mode_activated, 'on') | iif(states(eco_temp), states(target_temp)) }}"
mode: queued
max_exceeded: silent
